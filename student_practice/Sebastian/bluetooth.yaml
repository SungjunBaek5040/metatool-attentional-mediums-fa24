esphome:
  name: esp32-ble-beacon

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
  level: VERY_VERBOSE

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Metatool1 Fallback Hotspot"
    password: "DJjwCeDQqMD1"

captive_portal:

web_server:
  port: 80

ota:
  - platform: esphome
    password: ""

# BLE Beacon Config
esp32_ble_beacon:
  type: iBeacon
  uuid: !secret ble_beacon_uuid
  major: 2
  minor: 3
  measured_power: -59

# MQTT Configuration
mqtt:
  broker: io.adafruit.com
  username: sebschlo
  password: !secret mqtt_password
  discovery: false
  discover_ip: false
  topic_prefix: sebschlo/feeds
  log_topic: null
  keepalive: 5s
  on_message:
    topic: sebschlo/feeds/beacon-users
    then:
      - lambda: |-
          ESP_LOGD("mqtt", "Received ada message: %s", x.c_str());
          // Parse the JSON message
          bool success = parse_json(x.c_str(), [](JsonObject json) -> bool {
            if (!json.containsKey("2:3")) {
              ESP_LOGE("mqtt", "Key '2:3' not found in JSON");
              return false;
            }
            JsonObject users = json["2:3"];
            if (!users.containsKey("users") || !users["users"][0].containsKey("signalStrength")) {
              ESP_LOGE("mqtt", "Key 'users' or 'signalStrength' not found in JSON");
              return false;
            }

            int signalStrength = users["users"][0]["signalStrength"];
            ESP_LOGD("mqtt", "Extracted signalStrength: %d", signalStrength);
            
            // Calculate speed 
            int speed;
            if (signalStrength >= -30) {
              speed = 1; // Fastest speed
            } else if (signalStrength <= -90) {
              speed = 2000; // Slowest speed
            } else {
              speed = 1 + (signalStrength + 30) * (1999 / 60);
            }

            id(stepper_delay) = speed;
            ESP_LOGD("mqtt", "Stepper speed set to: %d ms", speed);
            return true; // Ensure the lambda returns a boolean
          });

          if (!success) {
            ESP_LOGE("mqtt", "Failed to parse JSON");
          }
  birth_message:
    topic: sebschlo/feeds/beacon-users
    payload: "Connected successfully"
  will_message:
    topic: sebschlo/feeds/beacon-users
    payload: "Disconnected"

stepper:
  - platform: a4988
    id: stepper1
    step_pin: GPIO11
    dir_pin: GPIO10
    max_speed: 250 steps/s
    acceleration: 500 steps/s^2
    deceleration: 500 steps/s^2

script:
  - id: oscillate_stepper1
    mode: restart
    then:
      - stepper.set_target:
          id: stepper1
          target: -500
      - delay: !lambda 'return id(stepper_delay);'
      - stepper.set_target:
          id: stepper1
          target: 500
      - delay: !lambda 'return id(stepper_delay);'

globals:
  - id: stepper_delay
    type: int
    restore_value: no
    initial_value: '2000'  # Default delay in milliseconds

# http_request:
#   useragent: esphome/device
#   verify_ssl: false

# interval:
#   - interval: 60s
#     then:
#       - http_request.get:
#           url: http://herokuapp.com
#           headers:
#             Content-Type: application/json
#           on_response:
#             then:
#               - logger.log:
#                   format: "Response status: %d, Duration: %u ms"
#                   args:
#                     - response->status_code
#                     - response->duration_ms
